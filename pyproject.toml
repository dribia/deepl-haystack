[project]
name = "deepl-haystack"
version = "0.3.0"
description = "Haystack integration with DeepL translation services provider."
authors = [{ name = "Albert Iribarne", email = "iribarne@dribia.com" }]
requires-python = ">=3.9,<3.14"
readme = "README.md"
license = "MIT"
maintainers = [
    { name = "Dribia Data Research", email = "code@dribia.com" },
]
keywords = [
    "haystack",
    "deepl",
    "translation",
    "nlp",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Operating System :: OS Independent",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "deepl>=1.19.1,<2",
    "haystack-ai>=2.0.0,<3",
    "pytest-dotenv>=0.5.2,<0.6",
    "pytest>=8.4.1,<9",
]

[project.urls]
Homepage = "https://github.com/dribia/deepl-haystack"
Repository = "https://github.com/dribia/deepl-haystack"
"Bug Tracker" = "https://github.com/dribia/deepl-haystack/issues"

[dependency-groups]
dev = ["pre-commit>=4.3.0,<5"]
ci = [
    "setuptools>=80.9.0,<81",
]
test = [
    "pytest>=8.3.5,<9",
    "pytest-mock>=3.14.1,<4",
    "pytest-cov>=6.2.1,<7",
]
lint = [
    "ruff==0.12.11",
    "mypy==1.17.1",
]

[tool.uv]
default-groups = [
    "test",
    "lint",
    "dev",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # convention
    "B",  # flake8-bugbear
    "D",  # pydocstyle
    "UP",  # pyupgrade
    "N",  # pep8-naming
    "NPY",  # numpy
    "PD",   # pandas
    "RUF",  # ruff
    "PTH",  # pathlib
    "SIM",  # simplify
    "RET",  # return
    "RSE",  # raise
    "Q",  # quotes
    "G",  # logging-format
    "LOG",  # logging
    "ISC",  # implicit str concat
    "C4",  # comprehensions
    "COM",  # commas
    "TD",  # to-do
    "INT",  # gettext
    "TRY",  # tryceratops
]
ignore = [
    "RUF013",  # implicit optional
    "ISC001",  # allow implicit str concat
    "COM812",  # allow missing trailing comma
    "TRY003",  # allow long messages outside the exception class
    "UP006",  # allow use of old typings
    "UP035",  # allow typing imports
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D"]

[tool.ruff.lint.isort]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
plugins = []
strict_optional = true
ignore_missing_imports = false

[[tool.mypy.overrides]]
module = [
    "haystack",
    "haystack.utils"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "8.0"
addopts = "--verbose"
filterwarnings = 'error'
xfail_strict = true
testpaths = ["tests"]
markers = [
  "integration: integration tests",
]

[tool.coverage.run]
source = ["deepl_haystack"]
branch = true

[tool.coverage.report]
precision = 2
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    '@overload',
]

[tool.coverage.xml]
output = "coverage.xml"
